{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ExpressionContext","React","createContext","EvaluationContext","OutputHistory","props","id","expression","evaluation","Output","input","parseFloat","UtilityList","useContext","setExpression","setEvaluation","utilities","setInput","allClearButton","key","className","onClick","clickUtility","clearButton","utility","charAt","substring","toString","utilityButtons","map","index","Utilities","OperatorList","operators","saveOrEvalExpression","operator","String","fromCharCode","eval","operatorButtons","Operators","NumberList","numbers","numberButtons","number","Numbers","App","useState","Provider","value","Boolean","window","location","hostname","match","addEventListener","document","querySelector","style","setProperty","innerHeight","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gpBAGMA,kBAAoBC,6CAAMC,cAAc,MACxCC,kBAAoBF,6CAAMC,cAAc,MAC9C,SAASE,cAAcC,GACrB,OACE,sHACE,kEAAKC,GAAG,cAAcD,EAAME,YAC5B,kEAAKD,GAAG,cAAcD,EAAMG,aAKlC,SAASC,OAAOJ,GACd,IAAMK,EAAQL,EAAMK,MAEpB,OACE,sHACE,kEAAKJ,GAAG,UAAUK,WAAWD,EAAO,MAK1C,SAASE,YAAYP,GAAQ,IAAD,EACUQ,sDAAWb,mBADrB,2KACPc,GADO,aAEUD,sDAAWV,mBAFrB,2KAEPY,GAFO,WAGpBC,EAAYX,EAAMW,UAClBN,EAAQL,EAAMK,MACdO,EAAWZ,EAAMY,SACjBC,EACJ,qEACEZ,GAAG,KACHa,IAAI,KACJC,UAAU,YACVC,QAAS,kBAAMC,EAAa,QAJ9B,MASIC,EACJ,qEACEjB,GAAG,IACHa,IAAI,IACJC,UAAU,YACVC,QAAS,kBAAMC,EAAa,OAJ9B,KASF,SAASA,EAAaE,GACpB,OAAQA,GACN,IAAK,KACHV,EAAc,IACdC,EAAc,IACdE,EAAS,GACT,MACF,IAAK,IACHA,EAAS,GACT,MACF,IAAK,MACqB,MAApBP,EAAMe,OAAO,GACfR,EAAS,IAAMP,GAEfO,EAASP,EAAMgB,UAAU,IAE3B,MACF,IAAK,IAEDT,EADY,IAAVP,EACO,GAEyB,IAAxBC,WAAWD,EAAO,KAAYiB,aAOhD,IAAMC,EAAiBZ,EAAUa,KAAI,SAACL,EAASM,GAAV,OACnC,qEACEV,UAAU,YACVD,IAAKK,EACLlB,GAAI,KAAOwB,EACXT,QAAS,kBAAMC,EAAaE,KAE3BA,MAGL,OACE,sHACa,IAAVd,EAAcQ,EAAiBK,EAC/BK,GAKP,SAASG,UAAU1B,GACjB,IACMK,EAAQL,EAAMK,MACdO,EAAWZ,EAAMY,SACvB,OACE,2DAACL,YAAD,CAAaI,UAJG,CAAC,MAAO,KAIWN,MAAOA,EAAOO,SAAUA,IAI/D,SAASe,aAAa3B,OAAQ,IAAD,aACSQ,sDAAWb,mBADpB,iMACpBO,WADoB,gBACRO,cADQ,6BAESD,sDAAWV,mBAFpB,iMAEpBK,WAFoB,gBAERO,cAFQ,gBAGrBkB,UAAY5B,MAAM4B,UAClBvB,MAAQL,MAAMK,MACdO,SAAWZ,MAAMY,SAEvB,SAASiB,qBAAqBC,UAC5B,OAAQA,UACN,IAAK,IACHrB,cAAcP,WAAaI,WAAWD,MAAO,IAAM,OACnDO,SAAS,GACT,MACF,IAAK,IACHH,cAAcP,WAAaI,WAAWD,MAAO,IAAM,OACnDO,SAAS,GACT,MACF,IAAK,IACHH,cAAcP,WAAaI,WAAWD,MAAO,IAAM,OACnDO,SAAS,GACT,MACF,KAAKmB,OAAOC,aAAa,UACvBvB,cAAcP,WAAaI,WAAWD,MAAO,IAAM,OACnDO,SAAS,GACT,MACF,IAAK,IACHH,cAAcP,WAAaI,WAAWD,MAAO,IAAM,MACnDK,cAAcuB,KAAK/B,WAAaI,WAAWD,MAAO,MAClDO,SAAS,IAMf,IAAMsB,gBAAkBN,UAAUJ,KAAI,SAACM,EAAUL,GAAX,OACpC,qEACEV,UAAU,YACVD,IAAKgB,EACL7B,GAAI,KAAOwB,EACXT,QAAS,kBAAMa,qBAAqBC,KAEnCA,MAGL,OAAO,sHAAGI,iBAGZ,SAASC,UAAUnC,GACjB,IAAMK,EAAQL,EAAMK,MACdO,EAAWZ,EAAMY,SACjBgB,EAAY,CAAC,IAAK,IAAK,IAAKG,OAAOC,aAAa,UAAW,KACjE,OACE,sHACE,2DAACL,aAAD,CAAcC,UAAWA,EAAWvB,MAAOA,EAAOO,SAAUA,KAMlE,SAASwB,WAAWpC,GAClB,IAAMqC,EAAUrC,EAAMqC,QAChBhC,EAAQL,EAAMK,MACdO,EAAWZ,EAAMY,SACjB0B,EAAgBD,EAAQb,KAAI,SAACe,EAAQd,GAAT,OAChC,qEACEV,UAAU,UACVD,IAAKyB,EACLtC,GAAI,MAAQwB,EACZT,QAAS,kBAAMJ,EAAS,GAAD,OAAIP,GAAJ,OAAYkC,MAElCA,MAGL,OAAO,sHAAGD,GAGZ,SAASE,QAAQxC,GACf,IACMK,EAAQL,EAAMK,MACdO,EAAWZ,EAAMY,SACvB,OACE,sHACE,2DAACwB,WAAD,CAAYC,QALA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAKbzB,SAAUA,EAAUP,MAAOA,KAK/D,SAASoC,MAAO,IAAD,EACaC,oDAAS,GADtB,2KACNrC,EADM,KACCO,EADD,OAEuB8B,oDAAS,IAFhC,2KAENxC,EAFM,KAEMO,EAFN,OAGuBiC,oDAAS,IAHhC,2KAGNvC,EAHM,KAGMO,EAHN,KAIb,OACE,sHACE,kEAAKT,GAAG,cACN,2DAACF,cAAD,CAAeG,WAAYA,EAAYC,WAAYA,IACnD,2DAACC,OAAD,CAAQC,MAAOA,IACf,2DAACmC,QAAD,CAAS5B,SAAUA,EAAUP,MAAOA,IACpC,2DAACV,kBAAkBgD,SAAnB,CAA4BC,MAAO,CAAC1C,EAAYO,IAC9C,2DAACX,kBAAkB6C,SAAnB,CAA4BC,MAAO,CAACzC,EAAYO,IAC9C,2DAACyB,UAAD,CAAWvB,SAAUA,EAAUP,MAAOA,IACtC,2DAACqB,UAAD,CAAWd,SAAUA,EAAUP,MAAOA,QAQnCoC,2B,sICzMKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNH,OAAOI,iBAAiB,UAAU,WAChCC,SACGC,cAAc,SACdC,MAAMC,YAAY,OAAQR,OAAOS,YAAc,IAAM,SAG1DC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjB,EAAA,EAAD,OAEFU,SAASQ,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfbba449.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport \"./App.css\";\n\nconst ExpressionContext = React.createContext(null);\nconst EvaluationContext = React.createContext(null);\nfunction OutputHistory(props) {\n  return (\n    <>\n      <div id=\"expression\">{props.expression}</div>\n      <div id=\"evaluation\">{props.evaluation}</div>\n    </>\n  );\n}\n\nfunction Output(props) {\n  const input = props.input;\n  //parseFloat makes initial 0 disappear! Hooray\n  return (\n    <>\n      <div id=\"output\">{parseFloat(input, 10)}</div>\n    </>\n  );\n}\n//get utilities from props and render\nfunction UtilityList(props) {\n  const [expression, setExpression] = useContext(ExpressionContext);\n  const [evaluation, setEvaluation] = useContext(EvaluationContext);\n  const utilities = props.utilities;\n  const input = props.input;\n  const setInput = props.setInput;\n  const allClearButton = (\n    <button\n      id=\"AC\"\n      key=\"AC\"\n      className=\"utilities\"\n      onClick={() => clickUtility(\"AC\")}\n    >\n      AC\n    </button>\n  );\n  const clearButton = (\n    <button\n      id=\"C\"\n      key=\"C\"\n      className=\"utilities\"\n      onClick={() => clickUtility(\"C\")}\n    >\n      C\n    </button>\n  );\n  function clickUtility(utility) {\n    switch (utility) {\n      case \"AC\":\n        setExpression(\"\");\n        setEvaluation(\"\");\n        setInput(0);\n        break;\n      case \"C\":\n        setInput(0);\n        break;\n      case \"+/-\":\n        if (input.charAt(0) !== \"-\") {\n          setInput(\"-\" + input);\n        } else {\n          setInput(input.substring(1));\n        }\n        break;\n      case \"%\":\n        if (input === 0) {\n          setInput(0);\n        } else {\n          setInput((parseFloat(input, 10) * 0.01).toString());\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  const utilityButtons = utilities.map((utility, index) => (\n    <button\n      className=\"utilities\"\n      key={utility}\n      id={\"ut\" + index}\n      onClick={() => clickUtility(utility)}\n    >\n      {utility}\n    </button>\n  ));\n  return (\n    <>\n      {input === 0 ? allClearButton : clearButton}\n      {utilityButtons}\n    </>\n  );\n}\n//All clear, clear, negative/positive, percentage\nfunction Utilities(props) {\n  const utilities = [\"+/-\", \"%\"];\n  const input = props.input;\n  const setInput = props.setInput;\n  return (\n    <UtilityList utilities={utilities} input={input} setInput={setInput} />\n  );\n}\n//get operators from props and render\nfunction OperatorList(props) {\n  const [expression, setExpression] = useContext(ExpressionContext);\n  const [evaluation, setEvaluation] = useContext(EvaluationContext);\n  const operators = props.operators;\n  const input = props.input;\n  const setInput = props.setInput;\n  //Saves input, concatenates to previous input(if any); reset state\n  function saveOrEvalExpression(operator) {\n    switch (operator) {\n      case \"+\":\n        setExpression(expression + parseFloat(input, 10) + \" + \");\n        setInput(0);\n        break;\n      case \"-\":\n        setExpression(expression + parseFloat(input, 10) + \" - \");\n        setInput(0);\n        break;\n      case \"x\":\n        setExpression(expression + parseFloat(input, 10) + \" * \");\n        setInput(0);\n        break;\n      case String.fromCharCode(\"0x00F7\"):\n        setExpression(expression + parseFloat(input, 10) + \" / \");\n        setInput(0);\n        break;\n      case \"=\":\n        setExpression(expression + parseFloat(input, 10) + \" =\");\n        setEvaluation(eval(expression + parseFloat(input, 10)));\n        setInput(0);\n        break;\n      default:\n        break;\n    }\n  }\n  const operatorButtons = operators.map((operator, index) => (\n    <button\n      className=\"operators\"\n      key={operator}\n      id={\"op\" + index}\n      onClick={() => saveOrEvalExpression(operator)}\n    >\n      {operator}\n    </button>\n  ));\n  return <>{operatorButtons}</>;\n}\n//operators on a calculator: + - * %\nfunction Operators(props) {\n  const input = props.input;\n  const setInput = props.setInput;\n  const operators = [\"+\", \"-\", \"x\", String.fromCharCode(\"0x00F7\"), \"=\"];\n  return (\n    <>\n      <OperatorList operators={operators} input={input} setInput={setInput} />\n    </>\n  );\n}\n\n//Get numbers from props and render. Add functionality\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const input = props.input;\n  const setInput = props.setInput;\n  const numberButtons = numbers.map((number, index) => (\n    <button\n      className=\"numbers\"\n      key={number}\n      id={\"num\" + index}\n      onClick={() => setInput(`${input}${number}`)}\n    >\n      {number}\n    </button>\n  ));\n  return <>{numberButtons}</>;\n}\n//numbers on a calculator\nfunction Numbers(props) {\n  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \".\"];\n  const input = props.input;\n  const setInput = props.setInput;\n  return (\n    <>\n      <NumberList numbers={numbers} setInput={setInput} input={input} />\n    </>\n  );\n}\n\nfunction App() {\n  const [input, setInput] = useState(0);\n  const [expression, setExpression] = useState(\"\");\n  const [evaluation, setEvaluation] = useState(\"\");\n  return (\n    <>\n      <div id=\"appWrapper\">\n        <OutputHistory expression={expression} evaluation={evaluation} />\n        <Output input={input} />\n        <Numbers setInput={setInput} input={input} />\n        <ExpressionContext.Provider value={[expression, setExpression]}>\n          <EvaluationContext.Provider value={[evaluation, setEvaluation]}>\n            <Operators setInput={setInput} input={input} />\n            <Utilities setInput={setInput} input={input} />\n          </EvaluationContext.Provider>\n        </ExpressionContext.Provider>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nwindow.addEventListener(\"resize\", () => {\n  document\n    .querySelector(\":root\")\n    .style.setProperty(\"--vh\", window.innerHeight / 100 + \"px\");\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}